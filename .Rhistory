debug(GreedyMotifSearch)
GreedyMotifSearch(DNA,3,5)
p
Motifs
GreedyMotifSearch <- function(DNAseqs,k,t){
BestMotifs <- c()
for(i in DNAseqs){
BestMotifs <-c(BestMotifs,substr(i,1,k))
}
n <- nchar(DNAseqs[1])
for(j in 1:(n-k+1)){
Motifs <- substr(DNAseqs[1],j,(j+k-1))
for(m in 2:t){
p <- muProfile(Motifs)
Motifs <- c(Motifs,profileMostProbable(DNAseqs[m],k,p))
}
if(muScore(Motifs)< muScore(BestMotifs)){
BestMotifs <- Motifs
}
p <- NULL
}
return(BestMotifs)
}
GreedyMotifSearch(DNA,3,5)
debug(GreedyMotifSearch)
GreedyMotifSearch(DNA,3,5)
p
Motifs
p
Motifs
Motifs
p
p
p
Motifs
p
BestMotifs
BestMotifs
muScore(BestMotifs)
muScore(Motifs)
GreedyMotifSearch <- function(DNAseqs,k,t){
BestMotifs <- c()
for(i in DNAseqs){
BestMotifs <-c(BestMotifs,substr(i,1,k))
}
n <- nchar(DNAseqs[1])
for(j in 1:(n-k+1)){
Motifs <- substr(DNAseqs[1],j,(j+k-1))
for(m in 2:t){
p <- muProfile(Motifs)
Motifs <- c(Motifs,profileMostProbable(DNAseqs[m],k,p))
}
if(muScore(Motifs)< muScore(BestMotifs)){
BestMotifs <- Motifs
}
}
return(BestMotifs)
}
debug(GreedyMotifSearch)
GreedyMotifSearch(DNA,3,5)
p
p
p
p
p
p
p
p
p
p
p
p
profileMostProbable <- function(txt,k,profile){
num <- nchar(txt)
bestscore <- -1
for(i in 1:(num-k+1)){
x <- substr(txt,i,(i+k-1))
if(pr(x,profile) > bestscore){
bestscore <- pr(x,profile)
mostprob <- x
}
}
return(mostprob)
}
testmatrix1 <- genematrix(3)
testmatrix1
testmatrix1["A",] <- c(1)
testmatrix1
profileMostProbable("AACCGGTT",k,testmatrix1)
profileMostProbable("AACCGGTT",3,testmatrix1)
DNA<-c(GCCCAA,GGCCTG,AACCTA,TTCCTT)
DNA<-c("GCCCAA","GGCCTG","AACCTA","TTCCTT")
GreedyMotifSearch(DNA,3,4)
GreedyMotifSearch(DNA,3,5)
Motifs
f <- c("GGCGTTCAGGCA","AAGAATCAGTCA","CAAGGAGTTCGC","CACGTCAATCAC","CAATAATATTCG")
GreedyMotifSearch(f,3,5)
Motifs
Motifs
p
p
Motifs
p
Motifs
p
Motifs
GreedyMotifSearch(f,3,5)
Motifs
Motifs
p
Motifs
p
p
p
p
Motifs
p
p
Motifs
Motifs
BestMotifs
Motifs
Motifs
p
p
p
Motifs
p
Motifs
Motifs
Motifs
Motifs
Motifs
p
BestMotifs
GreedyMotifSearch(f,3,5)
BestMotifs
BestMotifs
BestMotifs
Motifs
muScore(Motifs)
muScore(BestMotifs)
ll <- c("GTACAACTGT","CAACTATGAA","TCCTACAGGA","AAGCAAGGGT"
,"GCGTACGACC"
,"TCGTCAGCGT"
,"AACAAGGTCA"
,"CTCAGGCGTC"
,"GGATCCAGGT"
,"GGCAAGTACC")
ll
muScore(ll)
l <-c("AACGTA",
"CCCGTT",
"CACCTT",
"GGATTA",
"TTCCGG")
l
muScore(l)
muScore <- function(Motifs){
count <- muCount(Motifs)
score <- sum(count)
for (i in 1:length(count[[1]])) {
score<- (score - max(count[,i]))
}
return(score)
}
muScore(l)
muCount(l)
consensus(l)
consensus <- function(Motifs){
profile <- muProfile(Motifs)
conStrand <- vector(mode='character')
for (i in 1:length(profile[[1]])) {
conStrand <- append(conStrand,names(which.max(profile[,i])))
}
return(conStrand)
}
consensus(l)
consensus <- function(Motifs){
profile <- muProfile(Motifs)
conStrand <- vector(mode='character')
for (i in 1:length(profile[[1]])) {
conStrand <- append(conStrand,rowname(which.max(profile[,i])))
}
return(conStrand)
}
consensus(l)
l
l[1]
nchar(l[1])
muCount(l)
genematrix <- function(k,pseudo=FALSE){
gmatrix <- matrix(0,nrow = 4,ncol = k)
rownames(gmatrix) <- c("A","C","G","T")
if(pseudo==TRUE){
gmatrix <- gmatrix + 1
}
return(gmatrix)
}
View(consensus)
View(consensus)
debug(consensus)
consensus(l)
View(consensus)
View(consensus)
consensus <- function(Motifs){
profile <- muProfile(Motifs)
conStrand <- vector(mode='character')
for (i in 1:length(profile[[1]])) {
conStrand <- append(conStrand,rowname(which.max(profile[,i])))
}
return(conStrand)
}
which.max(l[,1])
l
muCount(l)
which.max(l[,1])
l
muCount(l)
muCount(l)[,1]
which.max(muCount(l)[,1])
name(which.max(muCount(l)[,1]))
names(which.max(muCount(l)[,1]))
consensus <- function(Motifs){
profile <- muCount(Motifs)
conStrand <- vector(mode='character')
for (i in 1:length(profile[[1]])) {
conStrand <- append(conStrand,names(which.max(profile[,i])))
}
return(conStrand)
}
consensus(l)
consensus <- function(Motifs){
profile <- muCount(Motifs)
conStrand <- vector(mode='character')
for (i in 1:length(profile[[1]])) {
conStrand <- c(conStrand,names(which.max(profile[,i])))
}
return(conStrand)
}
consensus(l)
consensus <- function(Motifs){
profile <- muCount(Motifs)
conStrand <- vector(mode='character')
for (i in 1:nchar(profile[[1]])) {
conStrand <- c(conStrand,names(which.max(profile[,i])))
}
return(conStrand)
}
consensus(l)
length(muCount(l))
length(muCount(l)[1])
length(muCount(l)[[1]])
l
l[[1]]
nchar(l[[1]])
consensus <- function(Motifs){
profile <- muCount(Motifs)
conStrand <- vector(mode='character')
for (i in 1:nchar(Motifs[[1]]) {
conStrand <- c(conStrand,names(which.max(profile[,i])))
}
return(conStrand)
}
consensus <- function(Motifs){
profile <- muCount(Motifs)
conStrand <- vector(mode='character')
for (i in 1:nchar(Motifs[[1]])) {
conStrand <- c(conStrand,names(which.max(profile[,i])))
}
return(conStrand)
}
nchar(l[[1]])
consensus(l)
muScore(l)
l
muCount(l)
sum(l)
sum(muCount(l))
muScore <- function(Motifs){
count <- muCount(Motifs)
score <- sum(count)
for (i in 1:nchar(Motifs[[1]])) {
score<- (score - max(count[,i]))
}
return(score)
}
muScore(l)
DNA
GreedyMotifSearch(f,3,5)
library(ggseqlogo)
library(devtools)
library(roxygen2)
GreedyMotifSearch <- function(DNAseqs,k,t,pseudo=FALSE){
for(i in DNAseqs){
BestMotifs <-c(BestMotifs,substr(i,1,k))
}
n <- nchar(DNAseqs[1])
for(j in 1:(n-k+1)){
Motifs <- substr(DNAseqs[1],j,(j+k-1))
for(m in 2:t){
p <- muProfile(Motifs,pseudo=pseudo)
Motifs <- c(Motifs,profileMostProbable(DNAseqs[m],k,p))
}
if(muScore(Motifs)< muScore(BestMotifs)){
BestMotifs <- Motifs
}
}
return(BestMotifs)
}
consensus <- function(Motifs){
profile <- muCount(Motifs)
conStrand <- vector(mode='character')
for (i in 1:nchar(Motifs[[1]])) {
conStrand <- c(conStrand,names(which.max(profile[,i])))
}
return(conStrand)
}
muScore <- function(Motifs){
count <- muCount(Motifs)
score <- sum(count)
for (i in 1:nchar(Motifs[[1]])) {
score<- (score - max(count[,i]))
}
return(score)
}
#' A function that takes a series of motifs and return a count of each AGTC at each position.
#' @param Motifs vector of motifs of interest
#' @param pseudo TRUE or FALSE statement, if pseudo is true than will implement pseudo counts.
#' @return A matrix with labeled Nucleotide
#' @export
muCount <- function(Motifs,pseudo=FALSE){
k <-nchar(Motifs[1])
count <- genematrix(k,pseudo = pseudo)
for(i in Motifs){
nuc <- strsplit(i,"")[[1]]
for(j in 1:k){
count[nuc[j],j]<- count[nuc[j],j]+1
}
}
return(count)
}
#simple function that makes empty Matrix with AGTC row titles,
#if pseudo is on all cell in matrix start with 1 instead of 0
genematrix <- function(k,pseudo=FALSE){
gmatrix <- matrix(0,nrow = 4,ncol = k)
rownames(gmatrix) <- c("A","C","G","T")
if(pseudo==TRUE){
gmatrix <- gmatrix + 1
}
return(gmatrix)
}
#' Extract frequency of specific kmers (snippets of specific length) from a larger sequence.
#' @param k An Integer representing length of kmer
#' @param txt A character string of DNA sequence
#' @return A List of frequency of kmers in txt sequence, Class of object is frequencyMap allowing
#' for specifc plot method.
#' @export
frequencyMap <- function(k,txt){ # k is an integer value representing a length of sequence (kmer)
freq <- list()
n <- nchar(txt)-2
for(i in 1:n){
x <- (k+i-1)
pattern <- substr(txt,i,x)
freq[[pattern]] <- patternCount(pattern,txt)
}
class(freq) <-"frequencyMap"  #classify end result to frequencyMap, allowing specific plotting
return(freq)
}
pr<- function(txt,profile){
p <- 1
txtstr <- strsplit(txt,"")[[1]]
for(i in 1:length(txtstr)){
p <- profile[txtstr[i],i]*p
}
return(as.numeric(p))
}
profileMostProbable <- function(txt,k,profile){
num <- nchar(txt)
bestscore <- -1
for(i in 1:(num-k+1)){
x <- substr(txt,i,(i+k-1))
if(pr(x,profile) > bestscore){
bestscore <- pr(x,profile)
mostprob <- x
}
}
return(mostprob)
}
f <-c("GGCGTTCAGGCA",
"AAGAATCAGTCA",
"CAAGGAGTTCGC",
"CACGTCAATCAC",
"CAATAATATTCG")
f
GreedyMotifSearch(f,3,5)
GreedyMotifSearch <- function(DNAseqs,k,t,pseudo=FALSE){
BestMotifs <- c()
for(i in DNAseqs){
BestMotifs <-c(BestMotifs,substr(i,1,k))
}
n <- nchar(DNAseqs[1])
for(j in 1:(n-k+1)){
Motifs <- substr(DNAseqs[1],j,(j+k-1))
for(m in 2:t){
p <- muProfile(Motifs,pseudo=pseudo)
Motifs <- c(Motifs,profileMostProbable(DNAseqs[m],k,p))
}
if(muScore(Motifs)< muScore(BestMotifs)){
BestMotifs <- Motifs
}
}
return(BestMotifs)
}
GreedyMotifSearch(f,3,5)
#' Generates a probability profile based on a series of sequences 'Motifs'
#' @param Motifs Vector of character DNA sequences
#' @param pseudo TRUE or FALSE condition, default FALSE. If TRUE will implement pseudo counts which alleviates biases
#' against some single point mutations
#' @return A profile class object with
#' @export
muProfile <- function(Motifs,pseudo=FALSE){
if (pseudo== FALSE){
counts <- muCount(Motifs)
}
else{
counts <- muCount(Motifs,pseudo=TRUE)
}
n <- length(Motifs)
profile <- (counts/n)
class(profile) <- "profile" #classification to allow for specific plot method
return(profile)
}
GreedyMotifSearch(f,3,5)
GreedyMotifSearch(f,3,5,pseudo = TRUE)
consensus(f)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
frequencyMap(3,"GTCGCTCGTACGATC")
m <- frequencyMap(3,"GTCGCTCGTACGATC")
plot(m)
devtools::document()
sampleMotif <- c("AACGTA","CCCGTT","CACCTT","GGATTA","TTCCGG")
muProfile(sampleMotif)
f<- muProfile(sampleMotif)
plot(f)
sampleMotif <- c("AACGTATTT","CCCGTTTTT","CACCTTTTT","GGATTATTT","TTCCGGTTT")
f<- muProfile(sampleMotif)
plot(f)
library(devtools)
library(roxygen2)
devtools::document()
DosR_Dataset<-c("GCGCCCCGCCCGGACAGCCATGCGCTAACCCTGGCTTCGATGGCGCCGGCTCAGTTAGGGCCGGAAGTCCCCAATGTGGCAGACCTTTCGCCCCTGGCGGACGAATGACCCCAGTGGCCGGGACTTCAGGCCCTATCGGAGGGCTCCGGCGCGGTGGTCGGATTTGTCTGTGGAGGTTACACCCCAATCGCAAGGATGCATTATGACCAGCGAGCTGAGCCTGGTCGCCACTGGAAAGGGGAGCAACATC",
"CCGATCGGCATCACTATCGGTCCTGCGGCCGCCCATAGCGCTATATCCGGCTGGTGAAATCAATTGACAACCTTCGACTTTGAGGTGGCCTACGGCGAGGACAAGCCAGGCAAGCCAGCTGCCTCAACGCGCGCCAGTACGGGTCCATCGACCCGCGGCCCACGGGTCAAACGACCCTAGTGTTCGCTACGACGTGGTCGTACCTTCGGCAGCAGATCAGCAATAGCACCCCGACTCGAGGAGGATCCCG",
"ACCGTCGATGTGCCCGGTCGCGCCGCGTCCACCTCGGTCATCGACCCCACGATGAGGACGCCATCGGCCGCGACCAAGCCCCGTGAAACTCTGACGGCGTGCTGGCCGGGCTGCGGCACCTGATCACCTTAGGGCACTTGGGCCACCACAACGGGCCGCCGGTCTCGACAGTGGCCACCACCACACAGGTGACTTCCGGCGGGACGTAAGTCCCTAACGCGTCGTTCCGCACGCGGTTAGCTTTGCTGCC",
"GGGTCAGGTATATTTATCGCACACTTGGGCACATGACACACAAGCGCCAGAATCCCGGACCGAACCGAGCACCGTGGGTGGGCAGCCTCCATACAGCGATGACCTGATCGATCATCGGCCAGGGCGCCGGGCTTCCAACCGTGGCCGTCTCAGTACCCAGCCTCATTGACCCTTCGACGCATCCACTGCGCGTAAGTCGGCTCAACCCTTTCAAACCGCTGGATTACCGACCGCAGAAAGGGGGCAGGAC",
"GTAGGTCAAACCGGGTGTACATACCCGCTCAATCGCCCAGCACTTCGGGCAGATCACCGGGTTTCCCCGGTATCACCAATACTGCCACCAAACACAGCAGGCGGGAAGGGGCGAAAGTCCCTTATCCGACAATAAAACTTCGCTTGTTCGACGCCCGGTTCACCCGATATGCACGGCGCCCAGCCATTCGTGACCGACGTCCCCAGCCCCAAGGCCGAACGACCCTAGGAGCCACGAGCAATTCACAGCG",
"CCGCTGGCGACGCTGTTCGCCGGCAGCGTGCGTGACGACTTCGAGCTGCCCGACTACACCTGGTGACCACCGCCGACGGGCACCTCTCCGCCAGGTAGGCACGGTTTGTCGCCGGCAATGTGACCTTTGGGCGCGGTCTTGAGGACCTTCGGCCCCACCCACGAGGCCGCCGCCGGCCGATCGTATGACGTGCAATGTACGCCATAGGGTGCGTGTTACGGCGATTACCTGAAGGCGGCGGTGGTCCGGA",
"GGCCAACTGCACCGCGCTCTTGATGACATCGGTGGTCACCATGGTGTCCGGCATGATCAACCTCCGCTGTTCGATATCACCCCGATCTTTCTGAACGGCGGTTGGCAGACAACAGGGTCAATGGTCCCCAAGTGGATCACCGACGGGCGCGGACAAATGGCCCGCGCTTCGGGGACTTCTGTCCCTAGCCCTGGCCACGATGGGCTGGTCGGATCAAAGGCATCCGTTTCCATCGATTAGGAGGCATCAA",
"GTACATGTCCAGAGCGAGCCTCAGCTTCTGCGCAGCGACGGAAACTGCCACACTCAAAGCCTACTGGGCGCACGTGTGGCAACGAGTCGATCCACACGAAATGCCGCCGTTGGGCCGCGGACTAGCCGAATTTTCCGGGTGGTGACACAGCCCACATTTGGCATGGGACTTTCGGCCCTGTCCGCGTCCGTGTCGGCCAGACAAGCTTTGGGCATTGGCCACAATCGGGCCACAATCGAAAGCCGAGCAG",
"GGCAGCTGTCGGCAACTGTAAGCCATTTCTGGGACTTTGCTGTGAAAAGCTGGGCGATGGTTGTGGACCTGGACGAGCCACCCGTGCGATAGGTGAGATTCATTCTCGCCCTGACGGGTTGCGTCTGTCATCGGTCGATAAGGACTAACGGCCCTCAGGTGGGGACCAACGCCCCTGGGAGATAGCGGTCCCCGCCAGTAACGTACCGCTGAACCGACGGGATGTATCCGCCCCAGCGAAGGAGACGGCG",
"TCAGCACCATGACCGCCTGGCCACCAATCGCCCGTAACAAGCGGGACGTCCGCGACGACGCGTGCGCTAGCGCCGTGGCGGTGACAACGACCAGATATGGTCCGAGCACGCGGGCGAACCTCGTGTTCTGGCCTCGGCCAGTTGTGTAGAGCTCATCGCTGTCATCGAGCGATATCCGACCACTGATCCAAGTCGGGGGCTCTGGGGACCGAAGTCCCCGGGCTCGGAGCTATCGGACCTCACGATCACC")
use_data(DosR_Dataset)
library(MuMotif)
DosR
DosR_Dataset<-c("GCGCCCCGCCCGGACAGCCATGCGCTAACCCTGGCTTCGATGGCGCCGGCTCAGTTAGGGCCGGAAGTCCCCAATGTGGCAGACCTTTCGCCCCTGGCGGACGAATGACCCCAGTGGCCGGGACTTCAGGCCCTATCGGAGGGCTCCGGCGCGGTGGTCGGATTTGTCTGTGGAGGTTACACCCCAATCGCAAGGATGCATTATGACCAGCGAGCTGAGCCTGGTCGCCACTGGAAAGGGGAGCAACATC",
"CCGATCGGCATCACTATCGGTCCTGCGGCCGCCCATAGCGCTATATCCGGCTGGTGAAATCAATTGACAACCTTCGACTTTGAGGTGGCCTACGGCGAGGACAAGCCAGGCAAGCCAGCTGCCTCAACGCGCGCCAGTACGGGTCCATCGACCCGCGGCCCACGGGTCAAACGACCCTAGTGTTCGCTACGACGTGGTCGTACCTTCGGCAGCAGATCAGCAATAGCACCCCGACTCGAGGAGGATCCCG",
"ACCGTCGATGTGCCCGGTCGCGCCGCGTCCACCTCGGTCATCGACCCCACGATGAGGACGCCATCGGCCGCGACCAAGCCCCGTGAAACTCTGACGGCGTGCTGGCCGGGCTGCGGCACCTGATCACCTTAGGGCACTTGGGCCACCACAACGGGCCGCCGGTCTCGACAGTGGCCACCACCACACAGGTGACTTCCGGCGGGACGTAAGTCCCTAACGCGTCGTTCCGCACGCGGTTAGCTTTGCTGCC",
"GGGTCAGGTATATTTATCGCACACTTGGGCACATGACACACAAGCGCCAGAATCCCGGACCGAACCGAGCACCGTGGGTGGGCAGCCTCCATACAGCGATGACCTGATCGATCATCGGCCAGGGCGCCGGGCTTCCAACCGTGGCCGTCTCAGTACCCAGCCTCATTGACCCTTCGACGCATCCACTGCGCGTAAGTCGGCTCAACCCTTTCAAACCGCTGGATTACCGACCGCAGAAAGGGGGCAGGAC",
"GTAGGTCAAACCGGGTGTACATACCCGCTCAATCGCCCAGCACTTCGGGCAGATCACCGGGTTTCCCCGGTATCACCAATACTGCCACCAAACACAGCAGGCGGGAAGGGGCGAAAGTCCCTTATCCGACAATAAAACTTCGCTTGTTCGACGCCCGGTTCACCCGATATGCACGGCGCCCAGCCATTCGTGACCGACGTCCCCAGCCCCAAGGCCGAACGACCCTAGGAGCCACGAGCAATTCACAGCG",
"CCGCTGGCGACGCTGTTCGCCGGCAGCGTGCGTGACGACTTCGAGCTGCCCGACTACACCTGGTGACCACCGCCGACGGGCACCTCTCCGCCAGGTAGGCACGGTTTGTCGCCGGCAATGTGACCTTTGGGCGCGGTCTTGAGGACCTTCGGCCCCACCCACGAGGCCGCCGCCGGCCGATCGTATGACGTGCAATGTACGCCATAGGGTGCGTGTTACGGCGATTACCTGAAGGCGGCGGTGGTCCGGA",
"GGCCAACTGCACCGCGCTCTTGATGACATCGGTGGTCACCATGGTGTCCGGCATGATCAACCTCCGCTGTTCGATATCACCCCGATCTTTCTGAACGGCGGTTGGCAGACAACAGGGTCAATGGTCCCCAAGTGGATCACCGACGGGCGCGGACAAATGGCCCGCGCTTCGGGGACTTCTGTCCCTAGCCCTGGCCACGATGGGCTGGTCGGATCAAAGGCATCCGTTTCCATCGATTAGGAGGCATCAA",
"GTACATGTCCAGAGCGAGCCTCAGCTTCTGCGCAGCGACGGAAACTGCCACACTCAAAGCCTACTGGGCGCACGTGTGGCAACGAGTCGATCCACACGAAATGCCGCCGTTGGGCCGCGGACTAGCCGAATTTTCCGGGTGGTGACACAGCCCACATTTGGCATGGGACTTTCGGCCCTGTCCGCGTCCGTGTCGGCCAGACAAGCTTTGGGCATTGGCCACAATCGGGCCACAATCGAAAGCCGAGCAG",
"GGCAGCTGTCGGCAACTGTAAGCCATTTCTGGGACTTTGCTGTGAAAAGCTGGGCGATGGTTGTGGACCTGGACGAGCCACCCGTGCGATAGGTGAGATTCATTCTCGCCCTGACGGGTTGCGTCTGTCATCGGTCGATAAGGACTAACGGCCCTCAGGTGGGGACCAACGCCCCTGGGAGATAGCGGTCCCCGCCAGTAACGTACCGCTGAACCGACGGGATGTATCCGCCCCAGCGAAGGAGACGGCG",
"TCAGCACCATGACCGCCTGGCCACCAATCGCCCGTAACAAGCGGGACGTCCGCGACGACGCGTGCGCTAGCGCCGTGGCGGTGACAACGACCAGATATGGTCCGAGCACGCGGGCGAACCTCGTGTTCTGGCCTCGGCCAGTTGTGTAGAGCTCATCGCTGTCATCGAGCGATATCCGACCACTGATCCAAGTCGGGGGCTCTGGGGACCGAAGTCCCCGGGCTCGGAGCTATCGGACCTCACGATCACC")
DosR_Dataset
muDemo <-function(){
return(DosR_Dataset<-c("GCGCCCCGCCCGGACAGCCATGCGCTAACCCTGGCTTCGATGGCGCCGGCTCAGTTAGGGCCGGAAGTCCCCAATGTGGCAGACCTTTCGCCCCTGGCGGACGAATGACCCCAGTGGCCGGGACTTCAGGCCCTATCGGAGGGCTCCGGCGCGGTGGTCGGATTTGTCTGTGGAGGTTACACCCCAATCGCAAGGATGCATTATGACCAGCGAGCTGAGCCTGGTCGCCACTGGAAAGGGGAGCAACATC",
"CCGATCGGCATCACTATCGGTCCTGCGGCCGCCCATAGCGCTATATCCGGCTGGTGAAATCAATTGACAACCTTCGACTTTGAGGTGGCCTACGGCGAGGACAAGCCAGGCAAGCCAGCTGCCTCAACGCGCGCCAGTACGGGTCCATCGACCCGCGGCCCACGGGTCAAACGACCCTAGTGTTCGCTACGACGTGGTCGTACCTTCGGCAGCAGATCAGCAATAGCACCCCGACTCGAGGAGGATCCCG",
"ACCGTCGATGTGCCCGGTCGCGCCGCGTCCACCTCGGTCATCGACCCCACGATGAGGACGCCATCGGCCGCGACCAAGCCCCGTGAAACTCTGACGGCGTGCTGGCCGGGCTGCGGCACCTGATCACCTTAGGGCACTTGGGCCACCACAACGGGCCGCCGGTCTCGACAGTGGCCACCACCACACAGGTGACTTCCGGCGGGACGTAAGTCCCTAACGCGTCGTTCCGCACGCGGTTAGCTTTGCTGCC",
"GGGTCAGGTATATTTATCGCACACTTGGGCACATGACACACAAGCGCCAGAATCCCGGACCGAACCGAGCACCGTGGGTGGGCAGCCTCCATACAGCGATGACCTGATCGATCATCGGCCAGGGCGCCGGGCTTCCAACCGTGGCCGTCTCAGTACCCAGCCTCATTGACCCTTCGACGCATCCACTGCGCGTAAGTCGGCTCAACCCTTTCAAACCGCTGGATTACCGACCGCAGAAAGGGGGCAGGAC",
"GTAGGTCAAACCGGGTGTACATACCCGCTCAATCGCCCAGCACTTCGGGCAGATCACCGGGTTTCCCCGGTATCACCAATACTGCCACCAAACACAGCAGGCGGGAAGGGGCGAAAGTCCCTTATCCGACAATAAAACTTCGCTTGTTCGACGCCCGGTTCACCCGATATGCACGGCGCCCAGCCATTCGTGACCGACGTCCCCAGCCCCAAGGCCGAACGACCCTAGGAGCCACGAGCAATTCACAGCG",
"CCGCTGGCGACGCTGTTCGCCGGCAGCGTGCGTGACGACTTCGAGCTGCCCGACTACACCTGGTGACCACCGCCGACGGGCACCTCTCCGCCAGGTAGGCACGGTTTGTCGCCGGCAATGTGACCTTTGGGCGCGGTCTTGAGGACCTTCGGCCCCACCCACGAGGCCGCCGCCGGCCGATCGTATGACGTGCAATGTACGCCATAGGGTGCGTGTTACGGCGATTACCTGAAGGCGGCGGTGGTCCGGA",
"GGCCAACTGCACCGCGCTCTTGATGACATCGGTGGTCACCATGGTGTCCGGCATGATCAACCTCCGCTGTTCGATATCACCCCGATCTTTCTGAACGGCGGTTGGCAGACAACAGGGTCAATGGTCCCCAAGTGGATCACCGACGGGCGCGGACAAATGGCCCGCGCTTCGGGGACTTCTGTCCCTAGCCCTGGCCACGATGGGCTGGTCGGATCAAAGGCATCCGTTTCCATCGATTAGGAGGCATCAA",
"GTACATGTCCAGAGCGAGCCTCAGCTTCTGCGCAGCGACGGAAACTGCCACACTCAAAGCCTACTGGGCGCACGTGTGGCAACGAGTCGATCCACACGAAATGCCGCCGTTGGGCCGCGGACTAGCCGAATTTTCCGGGTGGTGACACAGCCCACATTTGGCATGGGACTTTCGGCCCTGTCCGCGTCCGTGTCGGCCAGACAAGCTTTGGGCATTGGCCACAATCGGGCCACAATCGAAAGCCGAGCAG",
"GGCAGCTGTCGGCAACTGTAAGCCATTTCTGGGACTTTGCTGTGAAAAGCTGGGCGATGGTTGTGGACCTGGACGAGCCACCCGTGCGATAGGTGAGATTCATTCTCGCCCTGACGGGTTGCGTCTGTCATCGGTCGATAAGGACTAACGGCCCTCAGGTGGGGACCAACGCCCCTGGGAGATAGCGGTCCCCGCCAGTAACGTACCGCTGAACCGACGGGATGTATCCGCCCCAGCGAAGGAGACGGCG",
"TCAGCACCATGACCGCCTGGCCACCAATCGCCCGTAACAAGCGGGACGTCCGCGACGACGCGTGCGCTAGCGCCGTGGCGGTGACAACGACCAGATATGGTCCGAGCACGCGGGCGAACCTCGTGTTCTGGCCTCGGCCAGTTGTGTAGAGCTCATCGCTGTCATCGAGCGATATCCGACCACTGATCCAAGTCGGGGGCTCTGGGGACCGAAGTCCCCGGGCTCGGAGCTATCGGACCTCACGATCACC")
)
}
muDemo <-function(){
return(DosR_Dataset<-c("GCGCCCCGCCCGGACAGCCATGCGCTAACCCTGGCTTCGATGGCGCCGGCTCAGTTAGGGCCGGAAGTCCCCAATGTGGCAGACCTTTCGCCCCTGGCGGACGAATGACCCCAGTGGCCGGGACTTCAGGCCCTATCGGAGGGCTCCGGCGCGGTGGTCGGATTTGTCTGTGGAGGTTACACCCCAATCGCAAGGATGCATTATGACCAGCGAGCTGAGCCTGGTCGCCACTGGAAAGGGGAGCAACATC",
"CCGATCGGCATCACTATCGGTCCTGCGGCCGCCCATAGCGCTATATCCGGCTGGTGAAATCAATTGACAACCTTCGACTTTGAGGTGGCCTACGGCGAGGACAAGCCAGGCAAGCCAGCTGCCTCAACGCGCGCCAGTACGGGTCCATCGACCCGCGGCCCACGGGTCAAACGACCCTAGTGTTCGCTACGACGTGGTCGTACCTTCGGCAGCAGATCAGCAATAGCACCCCGACTCGAGGAGGATCCCG",
"ACCGTCGATGTGCCCGGTCGCGCCGCGTCCACCTCGGTCATCGACCCCACGATGAGGACGCCATCGGCCGCGACCAAGCCCCGTGAAACTCTGACGGCGTGCTGGCCGGGCTGCGGCACCTGATCACCTTAGGGCACTTGGGCCACCACAACGGGCCGCCGGTCTCGACAGTGGCCACCACCACACAGGTGACTTCCGGCGGGACGTAAGTCCCTAACGCGTCGTTCCGCACGCGGTTAGCTTTGCTGCC",
"GGGTCAGGTATATTTATCGCACACTTGGGCACATGACACACAAGCGCCAGAATCCCGGACCGAACCGAGCACCGTGGGTGGGCAGCCTCCATACAGCGATGACCTGATCGATCATCGGCCAGGGCGCCGGGCTTCCAACCGTGGCCGTCTCAGTACCCAGCCTCATTGACCCTTCGACGCATCCACTGCGCGTAAGTCGGCTCAACCCTTTCAAACCGCTGGATTACCGACCGCAGAAAGGGGGCAGGAC",
"GTAGGTCAAACCGGGTGTACATACCCGCTCAATCGCCCAGCACTTCGGGCAGATCACCGGGTTTCCCCGGTATCACCAATACTGCCACCAAACACAGCAGGCGGGAAGGGGCGAAAGTCCCTTATCCGACAATAAAACTTCGCTTGTTCGACGCCCGGTTCACCCGATATGCACGGCGCCCAGCCATTCGTGACCGACGTCCCCAGCCCCAAGGCCGAACGACCCTAGGAGCCACGAGCAATTCACAGCG",
"CCGCTGGCGACGCTGTTCGCCGGCAGCGTGCGTGACGACTTCGAGCTGCCCGACTACACCTGGTGACCACCGCCGACGGGCACCTCTCCGCCAGGTAGGCACGGTTTGTCGCCGGCAATGTGACCTTTGGGCGCGGTCTTGAGGACCTTCGGCCCCACCCACGAGGCCGCCGCCGGCCGATCGTATGACGTGCAATGTACGCCATAGGGTGCGTGTTACGGCGATTACCTGAAGGCGGCGGTGGTCCGGA",
"GGCCAACTGCACCGCGCTCTTGATGACATCGGTGGTCACCATGGTGTCCGGCATGATCAACCTCCGCTGTTCGATATCACCCCGATCTTTCTGAACGGCGGTTGGCAGACAACAGGGTCAATGGTCCCCAAGTGGATCACCGACGGGCGCGGACAAATGGCCCGCGCTTCGGGGACTTCTGTCCCTAGCCCTGGCCACGATGGGCTGGTCGGATCAAAGGCATCCGTTTCCATCGATTAGGAGGCATCAA",
"GTACATGTCCAGAGCGAGCCTCAGCTTCTGCGCAGCGACGGAAACTGCCACACTCAAAGCCTACTGGGCGCACGTGTGGCAACGAGTCGATCCACACGAAATGCCGCCGTTGGGCCGCGGACTAGCCGAATTTTCCGGGTGGTGACACAGCCCACATTTGGCATGGGACTTTCGGCCCTGTCCGCGTCCGTGTCGGCCAGACAAGCTTTGGGCATTGGCCACAATCGGGCCACAATCGAAAGCCGAGCAG",
"GGCAGCTGTCGGCAACTGTAAGCCATTTCTGGGACTTTGCTGTGAAAAGCTGGGCGATGGTTGTGGACCTGGACGAGCCACCCGTGCGATAGGTGAGATTCATTCTCGCCCTGACGGGTTGCGTCTGTCATCGGTCGATAAGGACTAACGGCCCTCAGGTGGGGACCAACGCCCCTGGGAGATAGCGGTCCCCGCCAGTAACGTACCGCTGAACCGACGGGATGTATCCGCCCCAGCGAAGGAGACGGCG",
"TCAGCACCATGACCGCCTGGCCACCAATCGCCCGTAACAAGCGGGACGTCCGCGACGACGCGTGCGCTAGCGCCGTGGCGGTGACAACGACCAGATATGGTCCGAGCACGCGGGCGAACCTCGTGTTCTGGCCTCGGCCAGTTGTGTAGAGCTCATCGCTGTCATCGAGCGATATCCGACCACTGATCCAAGTCGGGGGCTCTGGGGACCGAAGTCCCCGGGCTCGGAGCTATCGGACCTCACGATCACC")
)
}
muDemo()
muDemo()
load("~/GitHub/RmuMotif/Data/DosR_Dataset.rda")
load("~/GitHub/RmuMotif/Data/DosR_Dataset.rda")
use_data(DosR_Dataset)
devtools::document()
